"use strict";var __decorate=this&&this.__decorate||function(e,t,r,o){var n,a=arguments.length,i=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,r,o);else for(var c=e.length-1;c>=0;c--)(n=e[c])&&(i=(a<3?n(i):a>3?n(t,r,i):n(t,r))||i);return a>3&&i&&Object.defineProperty(t,r,i),i},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),SearchService=function(){function e(){}return e.prototype.extendedTrim=function(e){return e.replace(/\s+/g," ").trim()},e.prototype.perform=function(e,t,r,o){var n=new RegExp("("+t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")+")","gmi");t=this.extendedTrim(unescape(t));for(var a=[],i=0;i<e.length;i++){for(var c=e[i],f=!1,s=0;s<r.length;s++)if(Array===c[r[s]].constructor){for(var p=c[r[s]],s=0;s<p.length;s++)if(p[s].toLowerCase()===t.toLowerCase()){f=!0;break}if(f)break}else if("*"===t||c[r[s]].indexOf(t)!==-1||n.test(c[r[s]])){f=!0;break}if(f){var l=Object.assign({},c);o&&(l=this.hightlight(l,n,t)),a.push(l)}}return a.sort(this.compare)},e.prototype.hightlight=function(e,t,r){var o="**$1**";e.title=e.title.replace(t,o),e.content=e.content.replace(t,o);var n=e.content.toLowerCase(),a="**"+r.toLowerCase()+"**",i="*"===r?0:n.indexOf(a),c=this.shortify(e.content,i,a);return e.content="..."+c+"...",e},e.prototype.shortify=function(e,t,r,o){void 0===t&&(t=0),void 0===r&&(r=""),void 0===o&&(o=200);var n=t<o?0:t-o,a=t+r.length,i=a>e.length-(o+1)?e.length:a+o,c=e.substring(n,i),f=c.indexOf(" ")+1,s=c.lastIndexOf(" ");return c.substring(f,s)},e.prototype.compare=function(e,t){return e.date<t.date?1:t.date<e.date?-1:0},e=__decorate([core_1.Injectable(),__metadata("design:paramtypes",[])],e)}();exports.SearchService=SearchService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL3NlYXJjaC5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbIl9fZGVjb3JhdGUiLCJ0aGlzIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJkIiwiYyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInIiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJfX21ldGFkYXRhIiwiayIsInYiLCJtZXRhZGF0YSIsImNvcmVfMSIsInJlcXVpcmUiLCJTZWFyY2hTZXJ2aWNlIiwicHJvdG90eXBlIiwiZXh0ZW5kZWRUcmltIiwicyIsInJlcGxhY2UiLCJ0cmltIiwicGVyZm9ybSIsImRhdGEiLCJuZWVkbGUiLCJmaWVsZHMiLCJoaWdodGxpZ2h0IiwicGF0dGVybiIsIlJlZ0V4cCIsInVuZXNjYXBlIiwicmVzdWx0cyIsImVsZW1lbnQiLCJmb3VuZCIsIkFycmF5IiwiY29uc3RydWN0b3IiLCJ0YWdzIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwidGVzdCIsInJlc3VsdCIsImFzc2lnbiIsInB1c2giLCJzb3J0IiwiY29tcGFyZSIsInRpdGxlIiwiY29udGVudCIsImNvbnRlbnRSZXBsaWMiLCJib2xkTmVlZGxlIiwiYm9sZE5lZWRsZUluZGV4Iiwic2hvcnRDb250ZW50Iiwic2hvcnRpZnkiLCJzdGFydEluZGV4Iiwib2Zmc2V0Iiwic3RhcnQiLCJuZWVkbGVFbmQiLCJlbmQiLCJzdWJzdHJpbmciLCJmaXJzdFNwYWNlSW5kZXgiLCJsYXN0U3BhY2VJbmRleCIsImxhc3RJbmRleE9mIiwiYSIsImIiLCJkYXRlIiwiSW5qZWN0YWJsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFlBQ0EsSUFBSUEsWUFBY0MsTUFBUUEsS0FBS0QsWUFBZSxTQUFVRSxFQUFZQyxFQUFRQyxFQUFLQyxHQUM3RSxHQUEySEMsR0FBdkhDLEVBQUlDLFVBQVVDLE9B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QUlDLEdBQVFGLEVBQWFDLEVBQVMsRUFBSUQsRUFBYUMsRUFDL0NFLEVBQVlILEVBQWFKLEVBQVc3QyxPQUNwQ3FELEVBQU1ELEVBQVluQyxFQUFFakIsUUFBVWtELEVBQVMsR0FBS2pDLEVBQUVqQixPQUFVb0QsRUFBWUYsRUFDcEVILEVBQWU5QixFQUFFcUMsVUFBVUgsRUFBT0UsR0FDbENFLEVBQWtCUixFQUFhWixRQUFRLEtBQU8sRUFDOUNxQixFQUFpQlQsRUFBYVUsWUFBWSxJQUM5QyxPQUFPVixHQUFhTyxVQUFVQyxFQUFpQkMsSUFFbkQxQyxFQUFjQyxVQUFVMEIsUUFBVSxTQUFVaUIsRUFBR0MsR0FDM0MsTUFBUUQsR0FBRUUsS0FBT0QsRUFBRUMsS0FBUSxFQUFNRCxFQUFFQyxLQUFPRixFQUFFRSxRQUFhLEdBRTdEOUMsRUFBZ0J2QixZQUNacUIsT0FBT2lELGFBQ1ByRCxXQUFXLHlCQUNaTSxLQUdQZ0QsU0FBUWhELGNBQWdCQSIsImZpbGUiOiJzZXJ2aWNlcy9zZWFyY2guc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyk7XG52YXIgU2VhcmNoU2VydmljZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2VhcmNoU2VydmljZSgpIHtcbiAgICB9XG4gICAgU2VhcmNoU2VydmljZS5wcm90b3R5cGUuZXh0ZW5kZWRUcmltID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvXFxzKy9nLCAnICcpLnRyaW0oKTtcbiAgICB9O1xuICAgIFNlYXJjaFNlcnZpY2UucHJvdG90eXBlLnBlcmZvcm0gPSBmdW5jdGlvbiAoZGF0YSwgbmVlZGxlLCBmaWVsZHMsIGhpZ2h0bGlnaHQpIHtcbiAgICAgICAgdmFyIHBhdHRlcm4gPSBuZXcgUmVnRXhwKCcoJyArIG5lZWRsZS5yZXBsYWNlKC9bLVtcXF17fSgpKis/LixcXFxcXiR8I1xcc10vZywgXCJcXFxcJCZcIikgKyAnKScsICdnbWknKTtcbiAgICAgICAgbmVlZGxlID0gdGhpcy5leHRlbmRlZFRyaW0odW5lc2NhcGUobmVlZGxlKSk7XG4gICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgZGF0YS5sZW5ndGg7IHIrKykge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkYXRhW3JdO1xuICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheSA9PT0gZWxlbWVudFtmaWVsZHNbaV1dLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWdzID0gZWxlbWVudFtmaWVsZHNbaV1dO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWdzW2ldLnRvTG93ZXJDYXNlKCkgPT09IG5lZWRsZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5lZWRsZSA9PT0gXCIqXCIgfHwgZWxlbWVudFtmaWVsZHNbaV1dLmluZGV4T2YobmVlZGxlKSAhPT0gLTEgfHwgcGF0dGVybi50ZXN0KGVsZW1lbnRbZmllbGRzW2ldXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IE9iamVjdC5hc3NpZ24oe30sIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGlmIChoaWdodGxpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuaGlnaHRsaWdodChyZXN1bHQsIHBhdHRlcm4sIG5lZWRsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHMuc29ydCh0aGlzLmNvbXBhcmUpO1xuICAgIH07XG4gICAgU2VhcmNoU2VydmljZS5wcm90b3R5cGUuaGlnaHRsaWdodCA9IGZ1bmN0aW9uIChyZXN1bHQsIHBhdHRlcm4sIG5lZWRsZSkge1xuICAgICAgICB2YXIgcmVwbGFjZSA9IFwiXFwqXFwqJDFcXCpcXCpcIjtcbiAgICAgICAgcmVzdWx0LnRpdGxlID0gcmVzdWx0LnRpdGxlLnJlcGxhY2UocGF0dGVybiwgcmVwbGFjZSk7XG4gICAgICAgIHJlc3VsdC5jb250ZW50ID0gcmVzdWx0LmNvbnRlbnQucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IDIwMDtcbiAgICAgICAgdmFyIGNvbnRlbnRSZXBsaWMgPSByZXN1bHQuY29udGVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2YXIgYm9sZE5lZWRsZSA9IFwiKipcIiArIG5lZWRsZS50b0xvd2VyQ2FzZSgpICsgXCIqKlwiO1xuICAgICAgICB2YXIgYm9sZE5lZWRsZUluZGV4ID0gbmVlZGxlID09PSBcIipcIiA/IDAgOiBjb250ZW50UmVwbGljLmluZGV4T2YoYm9sZE5lZWRsZSk7XG4gICAgICAgIHZhciBzaG9ydENvbnRlbnQgPSB0aGlzLnNob3J0aWZ5KHJlc3VsdC5jb250ZW50LCBib2xkTmVlZGxlSW5kZXgsIGJvbGROZWVkbGUpO1xuICAgICAgICByZXN1bHQuY29udGVudCA9IFwiLi4uXCIgKyBzaG9ydENvbnRlbnQgKyBcIi4uLlwiO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgU2VhcmNoU2VydmljZS5wcm90b3R5cGUuc2hvcnRpZnkgPSBmdW5jdGlvbiAocywgc3RhcnRJbmRleCwgYm9sZE5lZWRsZSwgb2Zmc2V0KSB7XG4gICAgICAgIGlmIChzdGFydEluZGV4ID09PSB2b2lkIDApIHsgc3RhcnRJbmRleCA9IDA7IH1cbiAgICAgICAgaWYgKGJvbGROZWVkbGUgPT09IHZvaWQgMCkgeyBib2xkTmVlZGxlID0gXCJcIjsgfVxuICAgICAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHsgb2Zmc2V0ID0gMjAwOyB9XG4gICAgICAgIHZhciBzdGFydCA9IHN0YXJ0SW5kZXggPCBvZmZzZXQgPyAwIDogc3RhcnRJbmRleCAtIG9mZnNldDtcbiAgICAgICAgdmFyIG5lZWRsZUVuZCA9IHN0YXJ0SW5kZXggKyBib2xkTmVlZGxlLmxlbmd0aDtcbiAgICAgICAgdmFyIGVuZCA9IG5lZWRsZUVuZCA+IHMubGVuZ3RoIC0gKG9mZnNldCArIDEpID8gcy5sZW5ndGggOiAobmVlZGxlRW5kICsgb2Zmc2V0KTtcbiAgICAgICAgdmFyIHNob3J0Q29udGVudCA9IHMuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgICAgICB2YXIgZmlyc3RTcGFjZUluZGV4ID0gc2hvcnRDb250ZW50LmluZGV4T2YoXCIgXCIpICsgMTtcbiAgICAgICAgdmFyIGxhc3RTcGFjZUluZGV4ID0gc2hvcnRDb250ZW50Lmxhc3RJbmRleE9mKFwiIFwiKTtcbiAgICAgICAgcmV0dXJuIHNob3J0Q29udGVudC5zdWJzdHJpbmcoZmlyc3RTcGFjZUluZGV4LCBsYXN0U3BhY2VJbmRleCk7XG4gICAgfTtcbiAgICBTZWFyY2hTZXJ2aWNlLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIChhLmRhdGUgPCBiLmRhdGUpID8gMSA6ICgoYi5kYXRlIDwgYS5kYXRlKSA/IC0xIDogMCk7XG4gICAgfTtcbiAgICBTZWFyY2hTZXJ2aWNlID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKCksIFxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFtdKVxuICAgIF0sIFNlYXJjaFNlcnZpY2UpO1xuICAgIHJldHVybiBTZWFyY2hTZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuU2VhcmNoU2VydmljZSA9IFNlYXJjaFNlcnZpY2U7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
