[{"title":"When Artificial Intelligence meets accessibility","image":"http://i.imgur.com/rv9vdmX.gif","tags":["accessibility","facebook","artificial intelligence","ai"],"content":"Facebook's AI team has been doing a significant improvements on their researches. Inspired in biology, the AI network is basically a network of simulated neurons. They teach this virtual mind showing some pictures and telling it what it is. For instance, some pictures of dogs and stating the breed, the AI starts to learn the characteristics of that breed and then it can recognize the dog breed in another picture with the dog in a different position. Their artificial intelligence is about to help people. Now their advances enable their AI to read the images for you. Read?! Yes! The algorithm 'looks' at a picture and say what it may contain. The biggest bottlenecks here are the reliability and the speed on recognizing the photo elements. It's just the start... Regarding accessibility, the reading of images can provided vision-impaired people to picture the picture in their minds. A girl in the video says that only three words help to flash out the details she can't see. What about a whole statement?! It opens a huge door... An extension... An amplification of what we can do! Check out the full video below: I'm inspired by this video about our artificial intelligence research at Facebook.Our AI can now look at a photo,... Posted by Mark Zuckerberg on  Tuesday, 3 November 2015 They are moving towards their goal: Build intelligent machines to help people in their daily lives.","date":"2015-11-04T11:06:27.000Z","path":"ai-meets-accessibility"},{"title":"An amazing perspective of your versioned project. Gource.","image":"http://i.imgur.com/NyXG3Ju.png","tags":["3D","OpenGL","Animation"],"content":"See your project flow with other eyes. Gource it. Gource is free and open source software under GNU GPL v3 license that allows you to see the progress of your project by a tree, branchs and leaves. It works in Linux and Windows. Watch a video while it's working! Currently Gource includes built-in log generation support for Git, Mercurial, Bazaar and SVN (as of 0.29). And all requirements you need is OpenGL and a 3D accelerated video card to run. If you are a Linux user o/, you just have to install it via apt-get # apt-get install gource And then go to the root directory of your project and run the following command $ gource Visit the official website of the project Gource here .","date":"2013-04-16T00:24:40.000Z","path":"an-amazing-perspective-of-your-versioned-project-gource"},{"title":"Bitcoin","image":"http://i.imgur.com/UVgTCia.png","tags":["bitcoin","virtual","p2p","peer-to-peer"],"content":"Trade on Internet and its continuous usage increased the demand for quick and easy ways of payment, driving the emergence of online payment systems over the past years. Although there are several of these systems called \"virtual wallets\", all their properties are based on fiat currencies like the real and the gold, that is, physical coins. Thus, almost all transactions made are entrusted to financial institutions, called \"trusted third parties\" for the validation of centralised electronic payments. Bitcoin was designed to be an exception to the these conventional ways. Presented to the world in 2009 by Satoshi Nakamoto, Bitcoin is an independent fully electronic monetary system that has in its own structure based encryption, hashes as identifying unit, irreversible transactions, and the ability to verify and validate their transactions using protocols on a global peer-to-peer network of participants, thus, decentralised and distributed, earning the title of the first cryptocurrency. Despite not being a regulated currency, the acronym BTC is adopted as an international currency code. It is not bound to any governments, fiat currencies or other commodities. It relies on cryptography and protocols to allow transactions to be performed among two parties without going through financial institutions or validator companies of digital signatures named trusted third party. Thus, Bitcoin has the peculiarity of keeping entities' identity anonymously, while its flows is explicit and globally visible. Bitcoins transactions are broadcast to the network and collected into blocks. A transaction references previous transaction outputs, containing addresses which are SHA-256 hashes, as new transaction inputs and dedicates all input Bitcoin values to new outputs. Transactions are not encrypted as said before, so it is possible to browse and view every transaction ever collected into a block. Like the other kinds of money, the number of Bitcoins is finite. Unlike them, one Bitcoin is infinitely divided. So you can divide one fraction of Bitcoin into other infinite fractions. This is why some refer to \"infinite\" divisibility, because the network can select the level that is needed as time goes on. The current level selected in the code (by Satoshi) is 8 decimal places (1 satoshi = 0.00000001 BTC). New bitcoins are generated by the network through the process of \"mining\". Bitcoin miners use a special software to solve math problems in a certain amount of Bitcoins in exchange. This is a way to issue the currency and also it incentives other people to mining. The miners solve these math problems and also verifies the transactions that are being made along the network. As the math problems grow harder, mining pools were created to make a faster mining. Mining pools work like a computer network and each pool miner is rewarded according to the amount of work that he/she provided. Just like a continuous raffle draw, mining nodes on the network are awarded bitcoins each time they find the solution to a certain mathematical problem (and thereby create a new block). Creating a block is a proof of work with a difficulty that varies with the overall strength of the network. The reward for solving a block is automatically adjusted so that, ideally, every four years of operation of the Bitcoin network, half the amount of bitcoins created in the prior 4 years are created. The last block that will generate coins will be block #6,929,999 which should be generated at or near the year 2140. The total number of coins in circulation will then remain static at 20,999,999.9769 BTC. It may seem easy but surprisingly, it's still not easy to buy bitcoins with your credit card or PayPal. This is because such transactions can easily be tracked. First of all, you need to get yourself a Bitcoin wallet. A lot of apps or websites can do it for you because they use Bitcoin API to generate them. Second, there are many websites that work as markets, just like stock exchanges and home brokers, buying and selling Bitcoins. Most of them allow you to convert real money into Bitcoin. Markets Bitcoin Ticker : Tick by tick, real time updates. All data is indicative. Coinbase : Your bitcoin wallet Mercado Bitcoin : Largets market in Latin America Complementary readings Bitcoin Bitcoin Simplified Price Slump Tests Bitcoin’s Self-Correcting Economics Bitcoin: Our Best Tool for Privacy and Identity on the Internet Images: https://bitcoin.org/bitcoin.pdf","date":"2015-03-20T17:48:04.000Z","path":"bitcoin"},{"title":"Google honors George Boole","image":"http://i.imgur.com/Jkof57C.gif","tags":["googe","doodle","boole","boolean"],"content":"Today's Google's doodle is about one great mathematician and one of the greatest contributors to build what we today call it a computer: George Boole. In fact, Modern Computing and Modern Electronics started to be built a long time after 'The Laws of Thinking' — Boole's main work —, like a century after. Would Boole think that his work would be so important?! So important that every little action ~even in binary nerdie stuff~ in computer obeys the Boolean Logic. That's right! It got his name on it! At least that... The boolean value is fundamental for programming languages. This boolean value will tell if something is true or false , so the computer can perform actions based on these commands. Additionally, there are some combinations with true and false which are very largely used, which the Google's Doodle is representing. First take a look and the second G on the doodle, it represents x and y ~ our variables ~, and when the variable is showing its value is true , otherwise is false , let's go to the combinations: AND: for a 'AND' to produce a true value, both variables must be true. In our case, x and y must be true so the first G will be colored, otherwise 'AND' will produce a false value. XOR: for a 'XOR' to produce a true value, only one of the variables must be true. In our case, x must be true or y must be true, not both, so the first O will be colored, otherwise 'XOR' will produce a false value. X stands for exclusive. OR: for an 'OR' to produce a true value, at least one of the variables must be true. In our case, x or y must be true, or both, so the second O will be colored, otherwise 'OR' will produce a false value. NOT: differently of 'AND', 'OR' and 'XOR' that are binary, 'NOT' is an unary operation. For a 'NOT' to produce a true value, the variable must be false, because it's negating the its value. If the variable is true, 'NOT' will produce a false value. In our case, y must be false so the L will be colored, and x must be false so the E will be colored. Here we used only two variables, but those operations can be use with as much as variables you want, like: x AND y AND z AND a... So, because of this important contribution, Google honors the 200 th George Boole's birthday. Well done, Google!","date":"2015-11-02T16:03:52.000Z","path":"google-honors-george-boole"},{"title":"'Information Wants to Be Free'... But which kind of information?","image":"http://i.imgur.com/cwPQFSr.png","tags":["information","activism"],"content":"With the recent personal information leaks, the Stewart Brand's \"Information wants to be free\" resurfaces. But what kind of information is that?! This sentence is linked to another sentence \"Information wants to be expensive\" at the same statement. So it can be understood free referring to price and/or freedom. In fact, unfortunately, generalizing that \"Information wants to be free\" thing doesn't discriminate if this \"information\" is a music file, a part of a book text, or your personal data, credit cards and medical problems. Once information has passed to a new location outside of the source's control there is no way of ensuring it is not propagated further and widely distributed. Personal information must remain private (expensive, on other words), unless the owner wants it to be public. Government's information, such projects, expenditures, partnerships details, must be public because, in the end, the government is people's. And when it's not made public, it leaves an open gap to take advantage in whatever. Private companies' information must remain private. However, from the moment that companies information extend to the people and/or their government, they should be made public. A clear example of these is that news websites charge readers to view content on their pages, or offer some content for free and charge for them beyond the free area. But this type of general information should be public, as they are news that commonly are broadcasted in open television. Additionally, advertisements seems not to be enough for those websites, even more constant than in TV. And that information mostly involves public places or the people directly, such as protests coverage, public parties, etc. Unlike a fully streaming service that the only source of income is the monthly subscription (music, video or books services, for example). Such services need to pay royalties, production, licensing, etc. But even if the series are shared by torrents, it has a huge self-advertisement and much larger than in a paid service. Thus, it ends to cause the person to buy products, including books of which the series are based from. I can tell you that empirically. It is a call of the streaming services to offer better options for people tend to sign in on them. It's fair that they offer a free content and a paid content. But they can not forbid you to listen to their music, watch their series, read their books with the people in your circle. Digital content of common information should be free. In fact, I would say that not only does information want to be free but also the very content is often better when it is free. Not only to readers but also free to publishers. In most of social networks, they are rules about publishing contents. They might violate terms of use. Is it a censorship?! If you are using that service, you may accept their terms, including the removal of some content. This was publicly first contested by Internet pioneer John Gilmore in the pages of TIME Magazine in 1993: \"The Net interprets censorship as damage and routes around it.\". Back then, family-friendly online services used to delete messages they found offensive. Nowadays, those services even have features that the very users can report the content about that violation. And the Net really takes down content that does not fit to their subjective mind. Subjective because what can be offensive to me cannot be offensive to you. I know you probably heard about the Wikileaks-Amazon-Paypal thing. But, is any suppression of content a censorship?! Some things definitely need to be suppressed, removed, such as child pornography, don't you think?! As said by Jerry Brito, in Why Your Personal Information Wants to Be Free , it's better to think as information control rather censorship. We all think about information control somehow, that implies the subjectiveness I talked about. But what John Gilmore said about censorship applies to attempt to control any information online. Additionally, you need to keep in mind that you must be responsible for everything you do online at all circumstances. Because, everybody has access to it of a certain way. In fact, we can't control the information flood. Regarding the software, my thought is Open Source as many others think like me, probably most of us. However, we cannot force companies to open their code, although many companies use free-licensed softwares (or codes) in their background and don't mention them as the code license asks to. There is a mindset that needs to be accepted and received, not imposed. Of course there are things that must be kept secret even in a code like third-party credentials, for example. Despite the good sense, always there will be people trying to invade companies' system and companies trying the close those breaches. Like Stallman, \"I believe that all generally useful information should be free. By 'free' I am not referring to price, but rather to the freedom to copy the information and to adapt it to one's own uses... When information is generally useful, redistributing it makes humanity wealthier no matter who is distributing and no matter who is receiving.\" The Open Source thinking allows the society evolve technologically faster. Complementary readings Why Your Personal Information Wants to Be Free Privacy Matters The Definitive Story of Information Wants to Be Free Information wants to be free ... and expensive Information Wants To Be Free Entrepreneurs Must Defend Intellectual Property Rights","date":"2015-03-03T05:56:36.000Z","path":"information-wants-to-be-free-but-which-kind-of-information"},{"title":"Apple's Swift now is open source! Ok, now what?!","image":"http://i.imgur.com/U7TuUhm.png","tags":["apple","swift","open source"],"content":"Apple got everyone surprised at this year's WWDC when they disclosed that Swift would be open source. They did it yesterday! They released Swift on GitHub under Apache 2.0 License . Ok, but you must be asking what do I have to do with it?! If you are a final client, perhaps you won't notice such difference of an app built in Swift or another programming language. But if you are a developer and not familiar with this language, you will find it kinda fascinating and more intuitive than other languages. Swift makes things simpler. And that can affect the final user, apps being built faster with a better performance. On my personal experience, from the scratch of an app to its publishing on Apple Store took about 14 days, including Store's revision process. You can check it out here . For me, this is the natural order of scaling a product and make it more reliable to the developers and customers: Open Source. The advantages of an open source product is the flexibility that allows developers that are not inside the box to solve the issues, because they can show better solutions and the community stands together, thousands of new people inside that code, with more confidence over the language. But can it spoil the code? Well, that's why the standards of contributing exist for those kinda of stuff. Tests must be run to check that changes won't bring back past issues. There's is a control. This is a huge step for Apple, the first step ~I'm sure~, sometimes criticized for being closed in its own product world. Soon, we'll be seeing Swift softwares on Windows, Linux, Android(?), etc. Hopefully you are as anxious as I do.","date":"2015-12-04T15:42:16.000Z","path":"open-source-swift"},{"title":"Privacy matters","image":"http://i.imgur.com/cwPQFSr.png","tags":["privacy","information","activism"],"content":"We live in an era of mass surveillance. And things don't seem to change in an early future. Information is valuable and they pay (mi|bi)llions for that. But in a privacy-free world, only moulded and conditioned people would live. Our behaviour changes dramatically when we know that we are being watched. How many times have you seen \"Smile, you're being watched!\" inside lifts or places with a CCTV system?! The range of free thought and action about the options we have around reduces because we think how those people who are watching are analysing us. For us, developers, we don't like being watched when they are programming. Creativity leaks down. In Brazil, we have this expression that most parents or adult relatives say to their kids: \"Olha que Papai do céu está te vendo!\". It can be roughly translated to \"Watch out because God (heavenly Father) is looking at you\". But it kinda sounds more like a threat for the kid to behave. It reminds Google's slogan \"Don't be evil\". It's absolutely wrong to think that only a person evolved to bad activities wants some privacy. They usually says that \"because if you are not doing anything wrong, you don't need to worry about.\". Is that so?! No reason to fear that huge companies and the Government are monitoring you and your family, all the time?! For them, only those who confront power might be worried of privacy, which is not true. In fact, our information becomes valuable for companies that live mostly with ads. Their machines learn about our lifestyle by our information and they can target specific ads for us. Apple claims that it's not use our data for ads, since their business doesn’t depend on advertising. Unlike Google and Facebook that have targeted advertising as their largest incoming source. The more they know about us, the more they earn. No one wants a Big Brother of George Orwell's 1984 around! Everyone wants a little privacy. This video is an great speech given by the journalist Glenn Greenwald who helped Edward Snowden's disclosures of classified files. His work on the NSA files was in part the subject of the film Citizenfour, which won the 2014 Academy Award for Best Documentary. This next video is how our data should be stored at the companies' servers.","date":"2015-03-18T16:44:55.000Z","path":"privacy-matters"},{"title":"Pull Requests: you better use them.","image":"http://i.imgur.com/s6WXbc9.png","tags":["git","mercurial","scm"],"content":"Pull requests are a feature that many of repository hosting service provides such GitHub and Bitbucket . It is a better way of submitting contributions to a project using a distributed version control system such as Git or Mercurial and easier for developers to collaborate. It is important to highlight that PRs are a workflow feature , and not a feature of the version control system itself. And pull requesting occurs when a developer asks for changes committed to an external repository, often the local repository and a different branch from the branch you want to pull request to, to be considered for inclusion in a project’s main repository. PRs are basically a mechanism for a developer to tell team members that he/she has completed a feature and it’s ready to be included often on other branch by merging. Thus, all team members are notified of a new PR and can inspect it and merge it, including you ~ but it's not a good practice ~ . Generally, the hosting services provide a complete forum showing all info about the changes, who did it, why did it... PR flow is basically: You made changes on your branch and pull it to your respective branch on remote repository Then, on its hosting service there is a link to create a pull request where you choose the repo which is the source of the modifications and the destination. The team members, not you , analyse your modifications, discuss them, alter them, aprove them. When all is ok, the project maintainer merges it. PR is closed. Below is an real example of one of my repo in GitHub: Facebook Link Preview . Some developers has forked my repo and pull-requested to it. List of pull requests Pull request flow Pull request commit Here are two links to know about them: GitHub pull requests Bitbucket pull requests","date":"2015-02-01T10:47:35.000Z","path":"pull-requests-you-better-use-them"},{"title":"Three of my Android apps just got their source code opened","image":"http://i.imgur.com/GDUlJzz.png","tags":["google","play","android","open","source"],"content":"I've decided to open the code of three of my apps that are on Google Play: Multitouch Test, Unshorten It, Silence Please. Now, those contents are free under APACHE 2.0 License, so you can download it, study it, modify it at your will. Help the community! Engage yourself! Multitouch Test :: Google Play :: GitHub Unshorten It :: Google Play :: GitHub Silence Please :: Google Play :: GitHub","date":"2015-02-12T02:25:25.000Z","path":"three-of-my-android-apps-just-got-their-source-code-opened"},{"title":"What is Algorithm?","image":"http://i.imgur.com/UOZVOxe.png","tags":["Algorithm"],"content":"If you search the web the definition of algorithm, the more frequent answer is \"An algorithm is a finite sequence of instructions defined and unambiguous, each of which can be performed in a finite period of time and a finite amount of effort. \". This is just a basic idea. If perhaps you've never heard that word, know that for sure you practiced it at some point in your life. Have you ever cooked?! If yes, you followed the recipe steps to have the desired food, or at least it was meant to be. The fact is that if the sequence of steps is not followed as it is written in recipe, the end result can not be as the expected one. What if you have to hang out... Do you put on your shoes before the socks and then wear the pants? Such steps aren't really good, it's not a good idea. And this algorithm can be performed in three different ways that will produce the same outcome, can you perceive that? But these examples are simple, for there are much more complex algorithms, and others algorithms exist only in theory. Huh?! How so?! Just keep reading... Perhaps Algorithm is the most used term in the of Computing area. But it doesn't represent a specific computer program. It may have its implementation and execution on a computer, a mechanical machine, another automata, and until, of course, by people like the examples shown above. Different algorithms can accomplish the same task using a different set of instructions which may result in more or less expenditure of time, space or effort. And these attributes are related to the computational complexity that was applied to the algorithm and that depends directly on the data structure that was built into it. It is obvious that if you put your socks and shoes and then wear the pants that will take longer and be more work than you wear the pants first. Two different algorithms, but they will produce the same result. There are several ways to represent an algorithm more formally, some of them are a flowchart, coding and automata. Even more specific types of algorithm, such as neural, natural, sort, search, encryption, meta-heuristics, quantum, and many others. In the future, they will have their own post here. On what was talked about only theoretical algorithms, was an example that can be given is the Traveling Salesman Problem (TSP), that is an optimization problem of finding the route of least effort in which the Salesman visit exactly once all the cities and then return to your original city, but precisely it's about to find the lowest cost across all nodes of a weighted graph. The computational effort required to solve this problem grows exponentially in scale in relation to the given input (number of cities). In Analysis of Algorithms, it belongs to a class called NP-hard or NP-complex. Thus, since it is difficult, or even impossible, to determine optimal solution of this class of problems, methods of resolution that go through the heuristics that, in the mathematical point of view, do not ensure obtaining an optimal solution, but try to approximate the much as possible the optimal resolution. This was a brief idea about what is algorithm but remember, the algorithm is not ~ algarithm ~ (there is no such word, but people insist to say that), even less algarism... Image: Marshall Clemens","date":"2012-03-09T14:10:15.000Z","path":"what-is-algorithm"},{"title":"What terminal is Leo using","image":"http://i.imgur.com/zrFGeVY.png","tags":["terminal","iterm2","zsh","oh-my-zsh"],"content":"Paraphrasing Felix Krause's setup repo , here is some information about the setup I'm currently using. I use iTerm2 instead of the stock terminal Mac app I use oh-my-zshell I use Solarized Dark for the terminal colors I use powerline-shell to get those cool path bars. I use powerlevel9k theme to easily customise the shell. This is my currently customisation I use the Meslo Powerline Font as you need a font that supports the directory characters for powerline I use z an amazing tool to quickly jump between projects. It learns which directories you visit most and autocomplete their path on the terminal I use a set of aliases for git and you can check them at GitAliases I use TermHere to open a terminal on a specific folder from Finder. I just changed the Terminal App option on its configuration to open iTerm2 instead stock Mac terminal.","date":"2016-06-09T11:04:54.000Z","path":"what-terminal-is-leo-using"},{"title":"Why children should learn how to code early","image":"http://i.imgur.com/CJ0pSoR.jpg","tags":["early","programming","kids","children"],"content":"Everybody that uses Internet daily is using thanks to the developers and designers around the world. If it wasn’t by their work, we’d be stuck in the past. If you are one of the people who think that programming is a kind of magic or another world’s stuff, for others it seems more something seamlessly natural, passionate, intuitive, and even pleasant. But how?! Have you ever noticed how much kids love stories?! From the movies or books… When they ask you to read for them?! That’s right! If you think about a movie and its components, you will find out the screenplay, the director, the actors, the production, the scenarios, etc… All those components you may also find in programming! For example, the screenplay is detailed idea to be developed, the director may be the product owner, the actors are the developers, the production is the resources you have to program and the tracking of the whole process of programming, the scenarios are the small parts of the big idea. Wait, wait, wait! In fact, these terms are about a complete software process and really technical for children, they can assimilate this naturally though, just like they learn a new language that’s totally different from that which they speak, learn how to ride a bicycle, learning how to swim. Nobody starts programming knowing building all those stuff. We don’t learn to ride a bicycle without training wheels first. We do start easily. In programming, we start with Algorithm . An algorithm is a finite sequence of instructions defined and unambiguous, each of which can be performed in a finite period of time and a finite amount of effort. An algorithm is a finite sequence of instructions defined and unambiguous, each of which can be performed in a finite period of time and a finite amount of effort. In other words, an algorithm is some steps you do before something. Think about the bike. You mount the bike, prepare the pedal and push it down, so the bike starts moving. The steps you did are in favor of the goal, which is moving the bike. Not always the goal is reached by only one algorithm though. Thinking about swimming, if your goal is to cross the pool, you can use different styles to do it, some faster, some less tiring… Can you think about other way to cause the bike to move besides the example I gave? The algorithm is the main component of programming along with Mathematical Logic . With them, you will be able to learn any existing programming language. Some adjusts may be necessary from programming language to language, just like the spoken languages. But the core, the communication, is the same. Ok, but why should the children learn how to program?! Well, the kids have the ability to learn faster and more than the others, and coding is as beneficial as music lessons. The evolving process of their brains expand. They will be able to solve problems more naturally and faster, break complex problems into smaller ones, divide and conquer. They will know how to use abstraction, think outside the box. Additionally, they got in contact with mathematics more often. The triple combination is the basis of Computer Science: Mathematics, Logic and Algorithm. That’s our main tools to solve problems. The kids will learn the Computation Thinking . Computational thinking is the thought processes involved in formulating problems and their solutions so that the solutions are represented in a form that can be effectively carried out by an information-processing agent. Research Notebook: Computational Thinking — What and Why? I was born in ’90. I grew up seeing the technology a thousand faster than my parents did, and I’m sure that our future kids will see computers billions of times faster than we do. It’s the science fiction coming true. The children of the mid of ‘2000 already were born in world totally connected, they don’t even know what is rewinding a VHS video tape. But you can’t force a child to program, you need to incentive him/her. If he/she likes a game, you can ask if he/she would want to know how a game is made, how a robot moves, and so on… The very own interest and curiosity about technology is even better to welcome them to the Matrix. The idea that the children can use their own imagination to build what they want is ideal to boost interest on them. To show them that they can use tech to make something useful to a lot of people. Once you know how to code, you can create virtual worlds within the computer where the only limit on what is possible is your imagination. Why every child should learn to code And if we can do what we can do now, just imagine what we would be doing if all of those programmers around the world started in their childhood. We’d be some years ahead from our current time technologically speaking. Additionally, you don’t need to introduce a programming language to a child in the first place. There are several projects that introduce the concepts nicely to the children, such LEGO Mindstorms Everybody in this country should learn how to program a computer… Because it teaches you how to think. Steve Jobs Just check out what Bill, Mark, Jack and others also think about it:","date":"2015-10-26T13:48:04.000Z","path":"why-children-should-learn-how-to-code-early"}]