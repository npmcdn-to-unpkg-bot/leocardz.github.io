{"title":"Binary Heap","content":"A binary heap is a complete binary tree which follows the heap ordering property, that is all nodes are either greater than or equal to or less than or equal to each of its children, according to a comparison rule defined. By design, there are two approaches of ordering that can be applied: min-heap: each element's priority ≥ its parent's priority. The minimum priority stands on the top. max-heap: each element's priority ≤ its parent's priority. The maximum priority stands on the top. Here, we consider the highest element on the top. Insertion is performed the last level and the last position of the heap. After that, the new element is compared to its parent and if there is inconsistency with their order, a rearrangement is made by changing positions of the child and the parent by using the method swapHeapDownUp . This task is done until it hits the root. Deletion is always performed at the top of the heap. The root element is popped out. The vacant root is taken by the element with the last element of the last level. Then, the new top element is compared with its two children and, if necessary, the replacement is performed changing the root with one of its children with the method we particularly called swapHeapUpDown and the last step is performed again. Upgrade and Downgrade: those functions increase or decrease the priority inside the elements, reorganizing the heap if necessary. Code snippets Below you will see a binary tree which each element has two integers, first is the priority and the second is the value. public class Pair { /** priority */ public int p; /** index */ public int i; public Pair(int priority, int index) { this.p = priority; this.i = index; } @Override public String toString() { return \"[p=\" + p + \",i=\" + i + \"]\"; } } /** Binary Heap */ /** Bigger priority is on the top as default */ public class BinaryHeap { /** For priorization with high priority on top */ public static final int HIGH = 0; /** For priorization with low priority on top */ public static final int LOW = 1; private int priorityType; public BinaryHeap() { priorityType = HIGH; } public BinaryHeap(int type) { priorityType = type; } /** Inheap heaps.element x into priority queue */ public void inHeap(ArrayList priorityQueue, Pair x) { /** Add the pair x into priority queue */ priorityQueue.add(x); /** Check priority organization and reorganize if necessary */ swapHeapDownUp(priorityQueue, x); } /** Outheap heaps.element in the top of priority queue */ public void outHeap(ArrayList priorityQueue) { Pair bottom = bottom(priorityQueue); /** * Remove the heaps.element in the top and insert the heaps.element in the bottom * into the top */ priorityQueue.set(0, bottom); priorityQueue.remove(priorityQueue.size() - 1); if (priorityQueue.size() 0) { /** Reorganize the priorities over the top */ Pair x = priorityQueue.get(0); swapHeapUpDown(priorityQueue, x); } } /** Reorganize the queue priority of heaps.element x, from up down */ public void swapHeapUpDown(ArrayList priorityQueue, Pair x) { int currentPosition = 0; int currentLeftPositon = 2 * currentPosition + 1; int currentRightPositon = 2 * currentPosition + 2; /** * Compare priority heaps.element to its parents priority and swap if * necessary if xParentPosition = 0, it has reached the root. */ while (currentPosition 1) { if (priorityType == HIGH) { // High priorization if (currentLeftPositon = priorityQueue.size() || (currentRightPositon = priorityQueue .get(currentRightPositon).p))) { swap(priorityQueue, currentPosition + 1, currentLeftPositon + 1); currentPosition = currentLeftPositon; } else if (currentRightPositon priorityQueue .get(currentLeftPositon).p && (currentRightPositon = priorityQueue.size() || (currentRightPositon priorityQueue .get(currentRightPositon).p)) { swap(priorityQueue, currentPosition + 1, currentRightPositon + 1); currentPosition = currentRightPositon; } else { break; } } currentLeftPositon = 2 * currentPosition + 1; currentRightPositon = 2 * currentPosition + 2; } } /** Reorganize the queue priority of heaps.element x, from down up */ public void swapHeapDownUp(ArrayList priorityQueue, Pair x) { swapHeapDownUp(priorityQueue, x, priorityQueue.size()); } public void swapHeapDownUp(ArrayList priorityQueue, Pair x, int position) { int xPosition = position; int xParentPosition = xPosition / 2; /** * Compare priority heaps.element to its parents priority and swap if * necessary if xParentPosition = 0, it reached the root */ while (xParentPosition != 0 || (xParentPosition 0 && priorityQueue.get(xPosition - 1).p priorityQueue .get(xParentPosition - 1).p)) { if (priorityType == HIGH) { if (priorityQueue.get(xPosition - 1).p priorityQueue .get(xParentPosition - 1).p) { swap(priorityQueue, xPosition, xParentPosition); } } else { if (priorityQueue.get(xPosition - 1).p priorityQueue, int delta, Pair x) { int i = 0; /** Search the heaps.element to change its priority */ for (i = 0; i priorityQueue, int delta, Pair x) { /** Search the heaps.element to change its priority */ for (int i = 0; i priorityQueue) { return priorityQueue.get(0); } /** * Return the heaps.element in the bottom */ public Pair bottom(ArrayList priorityQueue) { return priorityQueue.get(priorityQueue.size() - 1); } /** Simple swap */ private void swap(ArrayList priorityQueue, int xPosition, int xParentPosition) { Pair temp = priorityQueue.get(xPosition - 1); priorityQueue .set(xPosition - 1, priorityQueue.get(xParentPosition - 1)); priorityQueue.set(xParentPosition - 1, temp); } } Using this code with these entries Pair[] SET = {new Pair(2, 3), new Pair(21, 4), new Pair(3, 9), new Pair(16, 16), new Pair(4, 4), new Pair(9, 2), new Pair(21, 7), new Pair(31, 9), new Pair(3, 3)} will produce the following result: Below there are links to all implementations of several applications of Priority Queue concept. Heaps Priority Queue Binary Heap AVL Indexed Binary Heap Min-Max Heap Radix Heap Usage Heap Sort K-Numbers (Smallest/Largest k numbers of the priority queue)","path":"binary-heap","image":"http://i.imgur.com/8DJn3OA.jpg","released":true,"date":"2015-01-08T18:21:56.000Z","github":"https://github.com/LeonardoCardoso/Priority-Queue","tags":["priority","queue","java","binary","heap"]}